/*
processImage.js
(C) Callum Baird, 2018

A script which fetches the map generated by the Google Static Maps API and processes it to determine the area of road in the selection.

Libraries used:
Google Static Maps, Google 2018 - https://developers.google.com/maps/documentation/maps-static/intro
Node.js, Node.js Foundation 2018 - https://nodejs.org/en/
Socket.io (via npm), Socket.io Team 2018 - https://socket.io/

*/

var url = ""; // url of the Google Static Map (generated in scripts/map.js)
var edgeLengthPx = 0; // size of one side of the selected area in px
var edgeLengthKm = 0; // size of one side of the selected area in km
var pixelAreaKm;
var roadPx = 0; // area of the road in px
var roadKm = 0; // area of the road in km

var socket = io.connect('localhost:8080'); // connect to the open socket

socket.on('btnClick', function(data){ // when the UI button has been clicked
    edgeLengthKm = data.size; // get the user selected size
    url = data.URL; // get the URL generated by the user's selection
    pixelAreaKm = 0;

    var canvas = document.getElementById("outputMap"); // UI element where image output will be displayed
    var context = canvas.getContext("2d"); // context for referencing the canvas content

    var img = new Image; // image object

    img.crossOrigin = "Anonymous"; // prevent security error

    img.onload = function(){ // on image load
        context.canvas.width = img.width; // set canvas width to contain the full image
        context.canvas.height = img.height;// set canvas height to contain the full image        

        context.drawImage(img,0,0,img.width,img.height); // fill the canvas with the image

        context.clip(); 

        var imgData = context.getImageData(0,0,context.canvas.width,context.canvas.height); // get the image data object
        var data = imgData.data; // get the array of pixels from the image data
        
        var output = cropImage(data, imgData); // process the image and get the new data

        imgData = output.imageData; // update image data with new cropped pic
        edgeLengthPx = output.edgeSize; // length of one edge in px
        var cropped = output.croppedPx; // amount of area cropped out of the image to show only user input       

        context.putImageData(imgData,0,0); // update the image data in the context

        roadPx = 250000 - cropped - processImage(imgData.data); // get amount of pixels containing road by subtracting cropped pixels and non road pixels from total

        pixelAreaKm = edgeLengthKm/(edgeLengthPx*edgeLengthPx);
        roadKm =  pixelAreaKm * roadPx;
        
        var areaText = document.getElementById("outputText1");
        if(roadKm < 1){
            areaText.innerHTML = String(Math.round(roadKm*10000000)/100) + "m<sup>2</sup>";
        }else{
            areaText.innerHTML = String(Math.round(roadKm*100)/100) + "km<sup>2</sup>";
        }
        

                
    };

    img.src = url; // fill the image with the one generated by the Google Static Maps URL, triggers img.onload event above 

       
});


/*
*
*
*/
function cropImage(pixelData, imageData){
    pixelArray = pixelData;
    pxCount = 0;
    onEdge = false;
    edgeDone = false;
    edgePxCount = 0;

    for(var i=0; i<pixelArray.length; i+=4){
        if(pixelArray[i]==pixelArray[i+1] && pixelArray[i]==pixelArray[i+2]){
                if(onEdge){
                    edgeDone = true;
                }
                pxCount ++;
                pixelArray[i]= 255;
                pixelArray[i+1]= 255;
                pixelArray[i+2] = 255;

        }else{
            onEdge = true;
            if(edgeDone==false){
                edgePxCount ++;
            }
        }
    }
    var newImgData = imageData;
    newImgData.data = pixelArray;
    return({imageData: newImgData, croppedPx: pxCount, edgeSize: edgePxCount});
}


/*
*rgb(38, 45, 124)
*
*/
function processImage(pixelData){
    pixelArray = pixelData;
    pxCount = 0;
    for(var i=0; i<pixelArray.length; i+=4){
        if(pixelArray[i]==38 &&pixelArray[i+1]==45 && pixelArray[i+2]==124){
            pxCount +=1;           
        }
    }
    return(pxCount);
}